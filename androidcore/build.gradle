/*
 * Copyright (C) 2019 - 2023 Niall 'Rivernile' Scott
 *
 * This software is provided 'as-is', without any express or implied
 * warranty.  In no event will the authors or contributors be held liable for
 * any damages arising from the use of this software.
 *
 * The aforementioned copyright holder(s) hereby grant you a
 * non-transferrable right to use this software for any purpose (including
 * commercial applications), and to modify it and redistribute it, subject to
 * the following conditions:
 *
 *  1. This notice may not be removed or altered from any file it appears in.
 *
 *  2. Any modifications made to this software, except those defined in
 *     clause 3 of this agreement, must be released under this license, and
 *     the source code of any modifications must be made available on a
 *     publically accessible (and locateable) website, or sent to the
 *     original author of this software.
 *
 *  3. Software modifications that do not alter the functionality of the
 *     software but are simply adaptations to a specific environment are
 *     exempt from clause 2.
 *
 */

plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-allopen'
    id 'com.google.dagger.hilt.android'
}

android {
    namespace 'uk.org.rivernile.android.bustracker.androidcore'
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    defaultConfig {
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        testInstrumentationRunner 'uk.org.rivernile.android.bustracker.core.CoreTestRunner'
        consumerProguardFiles 'proguard-consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
        }

        debug {
            testCoverageEnabled true
        }
    }

    flavorDimensions 'city'

    productFlavors {
        edinburgh {
            dimension 'city'

            // URLs
            buildConfigField('String', 'API_BASE_URL', '\"http://edinb.us/api/\"')
            buildConfigField('String', 'TRACKER_BASE_URL', '\"http://ws.mybustracker.co.uk/\"')

            // API keys
            buildConfigField('String', 'API_KEY', "\"${getApiKey('edinburgh')}\"")

            // Other
            buildConfigField('String', 'SCHEMA_NAME', '\"MBE_10\"')
            buildConfigField('String', 'API_APP_NAME', '\"MBE\"')
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    packagingOptions {
        resources {
            excludes += [
                    'META-INF/AL2.0',
                    'META-INF/LGPL2.1',
                    'META-INF/licenses/ASM',
                    'win32-x86-64/attach_hotspot_windows.dll',
                    'win32-x86/attach_hotspot_windows.dll'
            ]
        }
    }

    useLibrary 'android.test.mock'
}

allOpen {
    annotation 'uk.org.rivernile.android.bustracker.core.utils.OpenClass'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Our core module
    api project(':core')

    // City implementations
    edinburghApi project(':edinburgh')

    // Hilt (dependency injection)
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    kapt "com.google.dagger:hilt-compiler:$hiltVersion"
    api 'androidx.hilt:hilt-work:1.0.0'
    kapt 'androidx.hilt:hilt-compiler:1.0.0'

    // AppCompat
    implementation "androidx.appcompat:appcompat:$appCompatVersion"

    // Android Architecture Components
    api "androidx.lifecycle:lifecycle-livedata-ktx:$architectureComponentsVersion"

    // WorkManager
    api "androidx.work:work-runtime-ktx:$workManagerVersion"

    // Okhttp
    debugImplementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"

    // Retrofit
    api "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:$retrofitKotlinSerializationConverterVersion"

    // Google Play Services location
    api "com.google.android.gms:play-services-location:$playServicesLocationVersion"

    // Test dependencies
    androidTestImplementation project(':testutils')
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    androidTestImplementation "androidx.test:runner:$androidTestCoreVersion"
    androidTestImplementation "androidx.test:core-ktx:$androidTestCoreVersion"
    androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hiltVersion"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hiltVersion"

    testImplementation project(':testutils')
    testImplementation "androidx.arch.core:core-testing:$androidXCoreTesting"
}

private def getApiKey(final String city) {
    // Populate the build config with API keys which is provided as a project property so that
    // ApiKey.java can pick them up.
    return project.findProperty("mybus.${city}.apiKey") ?: "undefined"
}