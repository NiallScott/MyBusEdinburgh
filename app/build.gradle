import com.android.build.api.variant.ResValue

/*
 * Copyright (C) 2014 - 2023 Niall 'Rivernile' Scott
 *
 * This software is provided 'as-is', without any express or implied
 * warranty.  In no event will the authors or contributors be held liable for
 * any damages arising from the use of this software.
 *
 * The aforementioned copyright holder(s) hereby grant you a
 * non-transferrable right to use this software for any purpose (including
 * commercial applications), and to modify it and redistribute it, subject to
 * the following conditions:
 *
 *  1. This notice may not be removed or altered from any file it appears in.
 *
 *  2. Any modifications made to this software, except those defined in
 *     clause 3 of this agreement, must be released under this license, and
 *     the source code of any modifications must be made available on a
 *     publically accessible (and locateable) website, or sent to the
 *     original author of this software.
 *
 *  3. Software modifications that do not alter the functionality of the
 *     software but are simply adaptations to a specific environment are
 *     exempt from clause 2.
 */

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'kotlin-allopen'
    id 'com.google.dagger.hilt.android'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'com.google.firebase.appdistribution'
}

android {
    namespace 'uk.org.rivernile.edinburghbustracker.android'
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    defaultConfig {
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        firebaseAppDistribution {
            artifactType = 'APK'
            groups = 'testers'
        }
    }

    signingConfigs {
        globalDebug {
            storeFile file(project.findProperty('mybus.keystore.debug.file') ?: '/dev/null')
            storePassword project.findProperty('mybus.keystore.debug.storePassword') ?: 'not_set'
            keyAlias project.findProperty('mybus.keystore.debug.keyAlias') ?: 'not_set'
            keyPassword project.findProperty('mybus.keystore.debug.keyPassword') ?: 'not_set'
        }

        edinburgh {
            storeFile file(project.findProperty('mybus.keystore.release.file') ?: '/dev/null')
            storePassword project.findProperty('mybus.keystore.release.storePassword') ?: 'not_set'
            keyAlias project.findProperty('mybus.keystore.release.keyAlias') ?: 'not_set'
            keyPassword project.findProperty('mybus.keystore.release.keyPassword') ?: 'not_set'
        }
    }

    flavorDimensions 'city'

    productFlavors {
        edinburgh {
            dimension 'city'

            applicationId 'uk.org.rivernile.edinburghbustracker.android'
            versionCode 16
            versionName '3.0.1'
            archivesBaseName = "MyBusEdinburgh-$versionName"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            productFlavors {
                edinburgh {
                    signingConfig signingConfigs.edinburgh
                }
            }
        }

        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
            testCoverageEnabled true
            signingConfig signingConfigs.globalDebug
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    buildFeatures {
        viewBinding true
    }

    useLibrary 'android.test.mock'
}

androidComponents {
    onVariants(selector().all(), { variant ->
        variant.resValues[variant.makeResValueKey('string', 'package_name')] =
                new ResValue("${variant.applicationId.get()}", null)

        manifestPlaceholders.googleMapsApiKey = project
                .findProperty("mybus.${flavorName}.${buildType}.mapsKey")
                ?: 'undefined'
    })
}

allOpen {
    annotation 'uk.org.rivernile.android.bustracker.core.utils.OpenClass'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':androidcore')

    // Hilt (dependency injection)
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    kapt "com.google.dagger:hilt-compiler:$hiltVersion"

    // AndroidX and support libraries
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
    implementation "androidx.cardview:cardview:$cardViewVersion"
    implementation "androidx.viewpager2:viewpager2:$viewPager2Version"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    implementation "androidx.preference:preference-ktx:$androidXPreferenceVersion"

    // AndroidX and support libraries KTX
    implementation "androidx.core:core-ktx:$androidXCoreVersion"
    implementation "androidx.activity:activity-ktx:$androidXActivityVersion"
    implementation "androidx.fragment:fragment-ktx:$androidXFragmentVersion"
    debugImplementation "androidx.fragment:fragment-testing:$androidXFragmentVersion"

    // Android Architecture Components
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$architectureComponentsVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$architectureComponentsVersion"

    // Google Play Services
    implementation "com.google.android.gms:play-services-maps:$playServicesMapsVersion"
    implementation "com.google.maps.android:maps-ktx:$googleMapsKtxVersion"
    implementation "com.google.maps.android:android-maps-utils:$googleMapsUtilsVersion"
    implementation "com.google.maps.android:maps-utils-ktx:$googleMapsUtilsKtxVersion"

    // Firebase
    implementation platform("com.google.firebase:firebase-bom:$firebaseBomVersion")
    implementation 'com.google.firebase:firebase-crashlytics-ktx'

    implementation 'uk.org.rivernile.android.fetchutils:fetchutils-library:1.1.1'

    // Picasso
    implementation "com.squareup.picasso:picasso:$picassoVersion"

    // Test dependencies
    androidTestImplementation project(':testutils')
    androidTestImplementation "androidx.test:runner:$androidTestCoreVersion"
    androidTestImplementation "androidx.test:core-ktx:$androidTestCoreVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    androidTestImplementation "org.hamcrest:hamcrest-library:$hamcrestVersion"
    androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"

    testImplementation project(':testutils')
    testImplementation "androidx.arch.core:core-testing:$androidXCoreTesting"
}